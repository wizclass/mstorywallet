{"version":3,"sources":["../src/jquery-captcha.js"],"names":["$","fn","captcha","settings","_getHtml","ajax","method","url","captchaEndpoint","data","get","c","styleName","_validateUnsafe","captchaCode","onSuccess","instance","_getInstance","validationUrl","i","success","isCorrect","_registerUserInputBlurValidation","options","userInputID","on","trim","this","val","length","reloadImage","trigger","_getScript","extend","dataType","cache","_loadScriptIncludes","captchaId","done","_onLoadScriptsSuccess","_useUserInputBlurValidation","undefined","attr","window","botdetect","getInstanceByStyleName","_displayHtml","captchaHtml","element","html","replace","Error","init","getCaptchaId","getCaptchaCode","userInput","value","validateUnsafe","callback","isHuman","jQuery"],"mappings":"CAAC,SAASA,GACR,YAEAA,GAAEC,GAAGC,QAAU,SAASC,GAkBtB,QAASC,KACP,MAAOJ,GAAEK,MACPC,OAAQ,MACRC,IAAKJ,EAASK,gBACdC,MACEC,IAAK,OACLC,EAAGC,KAMT,QAASC,GAAgBC,EAAaC,GACpC,GAAIC,GAAWC,GAEfjB,GAAEK,MACAC,OAAQ,MACRC,IAAKS,EAASE,cACdT,MACEU,EAAGL,GAELM,QAAS,SAAUC,GACjBN,EAAUM,MAOhB,QAASC,KACP,GAAIN,GAAWC,GAEfjB,GAAE,IAAMgB,EAASO,QAAQC,aAAaC,GAAG,OAAQ,WAC/C,GAAIX,GAAcd,EAAE0B,KAAK1B,EAAE2B,MAAMC,MACjC,IAA2B,IAAvBd,EAAYe,OAAhB,CAEA,GAAIL,GAAcG,IAClBd,GAAgBC,EAAa,SAASO,GAC/BA,GACHL,EAASc,cAEX9B,EAAEwB,GAAaO,QAAQ,mBAAoBV,SAMjD,QAASW,GAAWzB,EAAKgB,GAMvB,MALAA,GAAUvB,EAAEiC,QACVC,SAAU,SACVC,OAAO,EACP5B,IAAKA,GACJgB,OACIvB,EAAEK,KAAKkB,GAIhB,QAASa,KACP,GAAIC,GAAYrC,EAAE,aAAeY,GAAWgB,KAE5CI,GADuB7B,EAASK,gBAAkB,yBAA2BI,EAAY,MAAQyB,EAAY,SAChFC,KAAKC,GAIpC,QAASC,KACP,GAAIxB,GAAWC,GACf,YAA+EwB,KAAvEzC,EAAE,IAAMgB,EAASO,QAAQC,aAAakB,KAAK,wBAIrD,QAASH,KACHC,KACFlB,IAKJ,QAASL,KAEP,WAAgC,KAArB0B,OAAOC,UACTD,OAAOC,UAAUC,uBAAuBjC,GAFlC,KAQjB,QAASkC,KACP1C,EAASD,EAASK,gBAAiBI,GAAW0B,KAAK,SAASS,GAC1DC,EAAQC,KAAKF,EAAYG,QAAQ,uBAAwB,KACzDd,MAzGJ,GAAIY,GAAUrB,IAEd,IAAuB,IAAnBqB,EAAQnB,OACV,KAAM,IAAIsB,OAAM,2CAGlB,KAAKhD,IAAaA,EAASK,gBACzB,KAAM,IAAI2C,OAAM,2CAIlBhD,GAASK,gBAAkBL,EAASK,gBAAgB0C,QAAQ,QAAS,GAErE,IAAItC,GAAYoC,EAAQvC,KAAK,aAAeuC,EAAQvC,KAAK,aAAe,gBAoIxE,OAnCAuC,GAAQI,KAAO,WAEb,MADAN,KACOE,GAITA,EAAQK,aAAe,WAErB,MADepC,KACCoB,WAIlBW,EAAQM,eAAiB,WAEvB,MADerC,KACCsC,UAAUC,OAI5BR,EAAQlB,YAAc,WACLb,IACNa,eAIXkB,EAAQS,eAAiB,SAASC,GAChC,GAAI1C,GAAWC,GAEfJ,GADkBb,EAAE0B,KAAK1B,EAAE,IAAMgB,EAASO,QAAQC,aAAaI,OAClC,SAAS+B,GACpCD,EAASC,GACJnB,KAAkCmB,GACrC3C,EAASc,iBAKRkB,EAAQI,SAGjBQ","file":"jquery-captcha.min.js","sourcesContent":["(function($) {\r\n  'use strict';\r\n  \r\n  $.fn.captcha = function(settings) {\r\n    \r\n    var element = this;\r\n    \r\n    if (element.length === 0) {\r\n      throw new Error('Captcha html element cound not be found.');\r\n    }\r\n\r\n    if (!settings || !settings.captchaEndpoint) {\r\n      throw new Error('The captchaEndpoint setting is required.');\r\n    }\r\n    \r\n    // normalize captcha endpoint path\r\n    settings.captchaEndpoint = settings.captchaEndpoint.replace(/\\/+$/g, '');\r\n    \r\n    var styleName = element.data('stylename') ? element.data('stylename') : 'defaultCaptcha';\r\n    \r\n    // get captcha html markup\r\n    function _getHtml() {\r\n      return $.ajax({\r\n        method: 'GET',\r\n        url: settings.captchaEndpoint,\r\n        data: {\r\n          get: 'html',\r\n          c: styleName\r\n        }\r\n      });\r\n    };\r\n\r\n    // ajax validate captcha\r\n    function _validateUnsafe(captchaCode, onSuccess) {\r\n      var instance = _getInstance();\r\n\r\n      $.ajax({\r\n        method: 'GET',\r\n        url: instance.validationUrl,\r\n        data: {\r\n          i: captchaCode\r\n        },\r\n        success: function (isCorrect) {\r\n          onSuccess(isCorrect);\r\n        }\r\n      });\r\n    };\r\n    \r\n    // ajax validate captcha on blur event and trigging the \r\n    // custom 'validatecaptcha' event to fire the validation result\r\n    function _registerUserInputBlurValidation() {\r\n      var instance = _getInstance();\r\n\r\n      $('#' + instance.options.userInputID).on('blur', function() {\r\n        var captchaCode = $.trim($(this).val());\r\n        if (captchaCode.length === 0) { return; }\r\n\r\n        var userInputID = this;\r\n        _validateUnsafe(captchaCode, function(isCorrect) {\r\n          if (!isCorrect) {\r\n            instance.reloadImage();\r\n          }\r\n          $(userInputID).trigger('validatecaptcha', [isCorrect]);\r\n        });\r\n      });\r\n    };\r\n    \r\n    // a custom of $.getScript(), which lets changing the options\r\n    function _getScript(url, options) {\r\n      options = $.extend({\r\n        dataType: 'script',\r\n        cache: false,\r\n        url: url\r\n      }, options || {});\r\n      return $.ajax(options);\r\n    };\r\n    \r\n    // load botdetect scripts and execute them\r\n    function _loadScriptIncludes() {\r\n      var captchaId = $('#BDC_VCID_' + styleName).val();\r\n      var scriptIncludeUrl = settings.captchaEndpoint + '?get=script-include&c=' + styleName + '&t=' + captchaId + '&cs=2';\r\n      _getScript(scriptIncludeUrl).done(_onLoadScriptsSuccess);\r\n    };\r\n    \r\n    // use user input blur validation if the input element has data-correct-captcha attribute\r\n    function _useUserInputBlurValidation() {\r\n      var instance = _getInstance();\r\n      return ($('#' + instance.options.userInputID).attr('data-correct-captcha') !== undefined);\r\n    };\r\n    \r\n    // fire the custom event when botdetect scripts are loaded\r\n    function _onLoadScriptsSuccess() {\r\n      if (_useUserInputBlurValidation()) {\r\n        _registerUserInputBlurValidation();\r\n      }\r\n    }\r\n    \r\n    // get botdetect captcha client-side instance\r\n    function _getInstance() {\r\n      var instance = null;\r\n      if (typeof window.botdetect !== 'undefined') {\r\n        return window.botdetect.getInstanceByStyleName(styleName);\r\n      }\r\n      return instance;\r\n    };\r\n    \r\n    // display captcha html markup in view\r\n    function _displayHtml() {\r\n      _getHtml(settings.captchaEndpoint, styleName).done(function(captchaHtml) {\r\n        element.html(captchaHtml.replace(/<script.*<\\/script>/g, ''));\r\n        _loadScriptIncludes();\r\n      });\r\n    }\r\n    \r\n    // plugin initialization - we display the captcha html markup in view\r\n    element.init = function() {\r\n      _displayHtml();\r\n      return element;\r\n    };\r\n    \r\n    // captcha id for validating captcha at server-side\r\n    element.getCaptchaId = function() {\r\n      var instance = _getInstance();\r\n      return instance.captchaId;\r\n    };\r\n\r\n    // the typed captcha code\r\n    element.getCaptchaCode = function() {\r\n      var instance = _getInstance();\r\n      return instance.userInput.value;\r\n    };\r\n    \r\n    // reload new captcha image\r\n    element.reloadImage = function() {\r\n      var instance = _getInstance();\r\n      instance.reloadImage();\r\n    };\r\n\r\n    // validate captcha on client-side and execute user callback function on ajax success\r\n    element.validateUnsafe = function(callback) {\r\n      var instance = _getInstance();\r\n      var captchaCode = $.trim($('#' + instance.options.userInputID).val());\r\n      _validateUnsafe(captchaCode, function(isHuman) {\r\n        callback(isHuman);\r\n        if (!_useUserInputBlurValidation() && !isHuman) {\r\n          instance.reloadImage();\r\n        }\r\n      });\r\n    };\r\n\r\n    return element.init();\r\n  };\r\n  \r\n}(jQuery));\r\n"]}